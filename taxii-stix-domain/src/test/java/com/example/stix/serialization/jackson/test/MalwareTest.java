package com.example.stix.serialization.jackson.test;

import com.example.stix.api.BundleObject;
import com.example.stix.api.objects.Malware;
import com.example.stix.impl.objects.MalwareImpl;
import com.example.stix.serialization.jackson.config.ObjectMapperConfiguration;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

public class MalwareTest {

    private final String malware_0 = 
            "{\n" +
            "\n" +
            "    \"type\": \"malware\",\n" +
            "\n" +
            "    \"id\": \"malware--31b940d4-6f7f-459a-80ea-9c1f17b5891b\",\n" +
            "\n" +
            "    \"created_by_ref\": \"identity--f431f809-377b-45e0-aa1c-6a4751cae5ff\",\n" +
            "\n" +
            "    \"created\": \"2016-04-06T20:07:09.000Z\",\n" +
            "\n" +
            "    \"modified\": \"2016-04-06T20:07:09.000Z\",\n" +
            "\n" +
            "    \"name\": \"Poison Ivy\"\n" +
            "\n" +
            "}";

    private final String malware_1 = 
            "{\n" +
            "\n" +
            "    \"type\": \"malware\",\n" +
            "\n" +
            "    \"id\": \"malware--31b940d4-6f7f-459a-80ea-9c1f17b5891b\",\n" +
            "\n" +
            "    \"created\": \"2016-04-06T20:07:09.000Z\",\n" +
            "\n" +
            "    \"modified\": \"2016-04-06T20:07:09.000Z\",\n" +
            "\n" +
            "    \"created_by_ref\": \"identity--f431f809-377b-45e0-aa1c-6a4751cae5ff\",\n" +
            "\n" +
            "    \"name\": \"Poison Ivy\"\n" +
            "\n" +
            "}";
    
    private final String malware_2 = "{\n" +
            "\n" +
            "  \"type\": \"malware\",\n" +
            "\n" +
            "  \"id\": \"malware--0c7b5b88-8ff7-4a4d-aa9d-feb398cd0061\",\n" +
            "\n" +
            "  \"created\": \"2016-05-12T08:17:27.000Z\",\n" +
            "\n" +
            "  \"modified\": \"2016-05-12T08:17:27.000Z\",\n" +
            "\n" +
            "  \"name\": \"Cryptolocker\",\n" +
            "\n" +
            "  \"description\": \"...\",\n" +
            "\n" +
            "  \"labels\": [\"ransomware\"]\n" +
            "\n" +
            "}";

    private ObjectMapper mapper;

    @Before
    public void setUp() {
        mapper = ObjectMapperConfiguration.buildObjectMapper();
    }

    @After
    public void tearDown() {
        mapper = null;
    }

    @Test
    public void deserializeAsBundleObject() throws IOException {
        asBundleObject(malware_0); // should fail missing labels
        asBundleObject(malware_1); // should fail missing labels
        asBundleObject(malware_2);
    }

    @Test
    public void asMalware() throws IOException {
        asMalware(malware_0); // should fail missing labels
        asMalware(malware_1); // should fail missing labels
        asMalware(malware_2);
    }

    @Test
    public void deserializeAsMalwareImpl() throws IOException {
        asMalwareImpl(malware_0); // should fail missing labels
        asMalwareImpl(malware_1); // should fail missing labels
        asMalwareImpl(malware_2);
    }

    private void asMalwareImpl(String value) throws IOException {
        MalwareImpl pattern = mapper.readValue(value, MalwareImpl.class);
        String serialized = mapper.writeValueAsString(pattern);
        Assert.assertTrue(DiffenceChecker.areEqual(mapper, value, serialized));
    }

    private void asMalware(String value) throws IOException {
        Malware pattern = mapper.readValue(value, Malware.class);
        String serialized = mapper.writeValueAsString(pattern);
        Assert.assertTrue(DiffenceChecker.areEqual(mapper, value, serialized));
    }

    private void asBundleObject(String value) throws IOException {
        BundleObject pattern = mapper.readValue(value, BundleObject.class);
        String serialized = mapper.writeValueAsString(pattern);
        Assert.assertTrue(DiffenceChecker.areEqual(mapper, value, serialized));
    }

}
